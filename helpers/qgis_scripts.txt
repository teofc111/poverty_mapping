import os
from qgis.core import QgsProject, QgsMapSettings, QgsMapRendererParallelJob, QgsMapLayerType
from qgis.utils import iface
from concurrent.futures import ThreadPoolExecutor
from PyQt5.QtCore import QSize

# Define the output folder
output_folder = "/home/tfc/Desktop/2022/temp2"

# Load the vector layer defining extents
extent_layer = QgsProject.instance().mapLayersByName("phil_2022_extents_epsg4326")[0]

# Prepare the QGIS map settings
map_settings = QgsMapSettings()
map_settings.setLayers([layer for layer in QgsProject.instance().mapLayers().values() if layer.type() == QgsMapLayerType.VectorLayer])
map_settings.setOutputSize(QSize(240, 240))  # Default output size

def export_feature(feature):
    geom = feature.geometry()
    extent = geom.boundingBox()
    map_settings.setExtent(extent)
    
    output_file = os.path.join(output_folder, f"map_{feature.id()}.png")
    
    # Adjust output size based on extent; you can modify the scaling factor as needed
    map_settings.setOutputSize(QSize(int(extent.width() * 10), int(extent.height() * 10)))
    
    # Use QgsMapRendererParallelJob for rendering
    render_job = QgsMapRendererParallelJob(map_settings)
    render_job.start()
    render_job.waitForFinished()
    
    image = render_job.renderedImage()
    image.save(output_file)
    
    print(f"Exported {output_file}")

# Use ThreadPoolExecutor to parallelize the export process
with ThreadPoolExecutor(max_workers=4) as executor:
    futures = [executor.submit(export_feature, feature) for feature in extent_layer.getFeatures()]
    for future in futures:
        future.result()

print("Export completed.")




import os
from qgis.core import QgsProject, QgsMapSettings, QgsMapRendererParallelJob, QgsMapLayerType
from qgis.utils import iface
from PyQt5.QtCore import QSize

# Define the output folder
output_folder = "/home/tfc/Desktop/2022/temp2"

# Create output folder if it does not exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)
    
# Load the vector layer defining extents
extent_layer = QgsProject.instance().mapLayersByName("phil_2022_extents_epsg4326")[0]

# Prepare the QGIS map settings
map_settings = QgsMapSettings()
map_settings.setLayers([layer for layer in QgsProject.instance().mapLayers().values() if layer.type() == QgsMapLayerType.VectorLayer])
map_settings.setOutputSize(QSize(240, 240))  # Default output size
def export_feature(feature):
    try:
        geom = feature.geometry()
        extent = geom.boundingBox()
        map_settings.setExtent(extent)
        
        output_file = os.path.join(output_folder, f"map_{feature.id()}.png")
        
        # Adjust output size based on extent; you can modify the scaling factor as needed
        map_settings.setOutputSize(QSize(int(extent.width() * 10), int(extent.height() * 10)))
        
        # Use QgsMapRendererParallelJob for rendering
        render_job = QgsMapRendererParallelJob(map_settings)
        render_job.start()
        render_job.waitForFinished()
        
        image = render_job.renderedImage()
        image.save(output_file)
        
        print(f"Exported {output_file}")
    except Exception as e:
        print(f"Failed to export feature {feature.id()}: {e}")


# Process each feature sequentially
for feature in extent_layer.getFeatures():
    export_feature(feature)

print("Export completed.")










import os
from qgis.core import QgsProject, QgsMapSettings, QgsMapRendererParallelJob, QgsMapLayerType
from PyQt5.QtCore import QSize

# Define the output folder
output_folder = "/home/tfc/Desktop/2022/temp2"

# Create output folder if it does not exist
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# Load the vector layer defining extents
extent_layer = QgsProject.instance().mapLayersByName("phil_2022_extents_epsg4326")[0]

# Prepare the QGIS map settings
def setup_map_settings():
    map_settings = QgsMapSettings()
    layers = [layer for layer in QgsProject.instance().mapLayers().values() if layer.isValid()]
    print(layers)
    map_settings.setLayers(layers)
    map_settings.setOutputSize(QSize(240, 240))
    return map_settings

map_settings = setup_map_settings()

def export_feature(feature):
    try:
        geom = feature.geometry()
        extent = geom.boundingBox()
        map_settings.setExtent(extent)
        
        output_file = os.path.join(output_folder, f"map_{feature.id()}.png")
        
        # Adjust output size based on extent
        map_settings.setOutputSize(QSize(int(extent.width() * 10), int(extent.height() * 10)))
        
        # Render the map
        render_job = QgsMapRendererParallelJob(map_settings)
        render_job.start()
        render_job.waitForFinished()
        
        image = render_job.renderedImage()
        image.save(output_file)
        
        print(f"Exported {output_file}")
    except Exception as e:
        print(f"Failed to export feature {feature.id()}: {e}")

# Process each feature sequentially
for feature in extent_layer.getFeatures():
    export_feature(feature)
    break

print("Export completed.")






